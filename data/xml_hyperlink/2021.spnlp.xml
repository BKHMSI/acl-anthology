<?xml version='1.0' encoding='utf-8'?>
<collection id="2021.spnlp">
  <volume id="1" ingest-date="2021-07-25">
    <meta>
      <booktitle>Proceedings of the 5th Workshop on Structured Prediction for NLP (SPNLP 2021)</booktitle>
      <editor><first>Zornitsa</first><last>Kozareva</last></editor>
      <editor><first>Sujith</first><last>Ravi</last></editor>
      <editor><first>Andreas</first><last>Vlachos</last></editor>
      <editor><first>Priyanka</first><last>Agrawal</last></editor>
      <editor><first>André</first><last>Martins</last></editor>
      <publisher>Association for Computational Linguistics</publisher>
      <address>Online</address>
      <month>August</month>
      <year>2021</year>
      <url hash="3b7ac25c">2021.spnlp-1</url>
    </meta>
    <frontmatter>
      <url hash="32da2870">2021.spnlp-1.0</url>
      <bibkey>spnlp-2021-structured</bibkey>
    </frontmatter>
    <paper id="1">
      <title>RewardsOfSum : Exploring Reinforcement Learning Rewards for Summarisation<fixed-case>R</fixed-case>ewards<fixed-case>O</fixed-case>f<fixed-case>S</fixed-case>um: Exploring Reinforcement Learning Rewards for Summarisation</title>
      <author><first>Jacob</first><last>Parnell</last></author>
      <author><first>Inigo</first><last>Jauregi Unanue</last></author>
      <author><first>Massimo</first><last>Piccardi</last></author>
      <pages>1–11</pages>
      <abstract>To date, most abstractive summarisation models have relied on variants of the negative log-likelihood (NLL) as their training objective. In some cases, <a href="https://en.wikipedia.org/wiki/Reinforcement_learning">reinforcement learning</a> has been added to train the <a href="https://en.wikipedia.org/wiki/Mathematical_model">models</a> with an objective that is closer to their evaluation measures (e.g. ROUGE). However, the <a href="https://en.wikipedia.org/wiki/Reward_system">reward function</a> to be used within the reinforcement learning approach can play a key role for performance and is still partially unexplored. For this reason, in this paper, we propose two reward functions for the task of abstractive summarisation : the first function, referred to as RwB-Hinge, dynamically selects the samples for the gradient update. The second <a href="https://en.wikipedia.org/wiki/Function_(mathematics)">function</a>, nicknamed RISK, leverages a small pool of strong candidates to inform the reward. In the experiments, we probe the proposed approach by fine-tuning an NLL pre-trained model over nine summarisation datasets of diverse size and nature. The experimental results show a consistent improvement over the negative log-likelihood baselines.</abstract>
      <url hash="cac9850f">2021.spnlp-1.1</url>
      <doi>10.18653/v1/2021.spnlp-1.1</doi>
      <bibkey>parnell-etal-2021-rewardsofsum</bibkey>
      <pwcdataset url="https://paperswithcode.com/dataset/newsroom">NEWSROOM</pwcdataset>
    </paper>
    <paper id="2">
      <title>SmBoP : Semi-autoregressive Bottom-up Semantic Parsing<fixed-case>S</fixed-case>m<fixed-case>B</fixed-case>o<fixed-case>P</fixed-case>: Semi-autoregressive Bottom-up Semantic Parsing</title>
      <author><first>Ohad</first><last>Rubin</last></author>
      <author><first>Jonathan</first><last>Berant</last></author>
      <pages>12–21</pages>
      <abstract>The de-facto standard decoding method for <a href="https://en.wikipedia.org/wiki/Semantic_parsing">semantic parsing</a> in recent years has been to autoregressively decode the <a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree">abstract syntax tree</a> of the target program using a top-down depth-first traversal. In this work, we propose an alternative approach : a Semi-autoregressive Bottom-up Parser (SmBoP) that constructs at decoding step t the top-K sub-trees of height   t. Our parser enjoys several benefits compared to top-down autoregressive parsing. From an efficiency perspective, <a href="https://en.wikipedia.org/wiki/Bottom-up_parsing">bottom-up parsing</a> allows to decode all <a href="https://en.wikipedia.org/wiki/Tree_(data_structure)">sub-trees</a> of a certain height in parallel, leading to <a href="https://en.wikipedia.org/wiki/Time_complexity">logarithmic runtime complexity</a> rather than <a href="https://en.wikipedia.org/wiki/Time_complexity">linear</a>. From a modeling perspective, a <a href="https://en.wikipedia.org/wiki/Bottom-up_parsing">bottom-up parser</a> learns representations for meaningful semantic sub-programs at each step, rather than for semantically-vacuous partial trees. We apply SmBoP on Spider, a challenging zero-shot semantic parsing benchmark, and show that SmBoP leads to a 2.2x speed-up in decoding time and a ~5x speed-up in training time, compared to a <a href="https://en.wikipedia.org/wiki/Semantic_parser">semantic parser</a> that uses autoregressive decoding. SmBoP obtains 71.1 denotation accuracy on Spider, establishing a new state-of-the-art, and 69.5 exact match, comparable to the 69.6 exact match of the autoregressive RAT-SQL+Grappa.</abstract>
      <url hash="a07509ac">2021.spnlp-1.2</url>
      <attachment type="OptionalSupplementaryMaterial" hash="e4e5214e">2021.spnlp-1.2.OptionalSupplementaryMaterial.pdf</attachment>
      <doi>10.18653/v1/2021.spnlp-1.2</doi>
      <bibkey>rubin-berant-2021-smbop-semi</bibkey>
    </paper>
    <paper id="5">
      <title>Mode recovery in neural autoregressive sequence modeling</title>
      <author><first>Ilia</first><last>Kulikov</last></author>
      <author><first>Sean</first><last>Welleck</last></author>
      <author><first>Kyunghyun</first><last>Cho</last></author>
      <pages>44–52</pages>
      <abstract>Despite its wide use, recent studies have revealed unexpected and undesirable properties of neural autoregressive sequence models trained with <a href="https://en.wikipedia.org/wiki/Maximum_likelihood_estimation">maximum likelihood</a>, such as an unreasonably high affinity to short sequences after training and to infinitely long sequences at decoding time. We propose to study these phenomena by investigating how the modes, or local maxima, of a distribution are maintained throughout the full learning chain of the ground-truth, empirical, learned and decoding-induced distributions, via the newly proposed mode recovery cost. We design a tractable testbed where we build three types of ground-truth distributions : (1) an LSTM based structured distribution, (2) an unstructured distribution where probability of a sequence does not depend on its content, and (3) a product of these two which we call a semi-structured distribution. Our study reveals both expected and unexpected findings. First, starting with <a href="https://en.wikipedia.org/wiki/Data_collection">data collection</a>, mode recovery cost strongly relies on the ground-truth distribution and is most costly with the semi-structured distribution. Second, after learning, mode recovery cost from the ground-truth distribution may increase or decrease compared to <a href="https://en.wikipedia.org/wiki/Data_collection">data collection</a>, with the largest cost degradation occurring with the semi-structured ground-truth distribution. Finally, the ability of the decoding-induced distribution to recover modes from the learned distribution is highly impacted by the choices made earlier in the learning chain. We conclude that future research must consider the entire learning chain in order to fully understand the potentials and perils and to further improve neural autoregressive sequence models.<i>learning chain</i> of the ground-truth, empirical, learned and decoding-induced distributions, via the newly proposed <i>mode recovery cost</i>. We design a tractable testbed where we build three types of ground-truth distributions: (1) an LSTM based structured distribution, (2) an unstructured distribution where probability of a sequence does not depend on its content, and (3) a product of these two which we call a semi-structured distribution. Our study reveals both expected and unexpected findings. First, starting with data collection, mode recovery cost strongly relies on the ground-truth distribution and is most costly with the semi-structured distribution. Second, after learning, mode recovery cost from the ground-truth distribution may increase or decrease compared to data collection, with the largest cost degradation occurring with the semi-structured ground-truth distribution. Finally, the ability of the decoding-induced distribution to recover modes from the learned distribution is highly impacted by the choices made earlier in the learning chain. We conclude that future research must consider the entire learning chain in order to fully understand the potentials and perils and to further improve neural autoregressive sequence models.</abstract>
      <url hash="4141b8ad">2021.spnlp-1.5</url>
      <attachment type="OptionalSupplementaryMaterial" hash="5cc13228">2021.spnlp-1.5.OptionalSupplementaryMaterial.zip</attachment>
      <doi>10.18653/v1/2021.spnlp-1.5</doi>
      <bibkey>kulikov-etal-2021-mode</bibkey>
      <pwccode url="https://github.com/uralik/mode_recovery" additional="false">uralik/mode_recovery</pwccode>
      <pwcdataset url="https://paperswithcode.com/dataset/wikitext-103">WikiText-103</pwcdataset>
    </paper>
    <paper id="6">
      <title>Using Hierarchical Class Structure to Improve Fine-Grained Claim Classification</title>
      <author><first>Erenay</first><last>Dayanik</last></author>
      <author><first>Andre</first><last>Blessing</last></author>
      <author><first>Nico</first><last>Blokker</last></author>
      <author><first>Sebastian</first><last>Haunss</last></author>
      <author><first>Jonas</first><last>Kuhn</last></author>
      <author><first>Gabriella</first><last>Lapesa</last></author>
      <author><first>Sebastian</first><last>Padó</last></author>
      <pages>53–60</pages>
      <abstract>The analysis of public debates crucially requires the classification of political demands according to hierarchical claim ontologies (e.g. for immigration, a supercategory Controlling Migration might have subcategories Asylum limit or Border installations). A major challenge for automatic claim classification is the large number and low frequency of such <a href="https://en.wikipedia.org/wiki/Inheritance_(object-oriented_programming)">subclasses</a>. We address it by jointly predicting pairs of matching super- and subcategories. We operationalize this idea by (a) encoding <a href="https://en.wikipedia.org/wiki/Constraint_(mathematics)">soft constraints</a> in the claim classifier and (b) imposing <a href="https://en.wikipedia.org/wiki/Constraint_(mathematics)">hard constraints</a> via <a href="https://en.wikipedia.org/wiki/Integer_linear_programming">Integer Linear Programming</a>. Our experiments with different claim classifiers on a German immigration newspaper corpus show consistent performance increases for joint prediction, in particular for infrequent categories and discuss the complementarity of the two approaches.<i>claim ontologies</i> (e.g. for immigration, a supercategory “Controlling Migration” might have subcategories “Asylum limit” or “Border installations”). A major challenge for automatic claim classification is the large number and low frequency of such subclasses. We address it by jointly predicting pairs of matching super- and subcategories. We operationalize this idea by (a) encoding soft constraints in the claim classifier and (b) imposing hard constraints via Integer Linear Programming. Our experiments with different claim classifiers on a German immigration newspaper corpus show consistent performance increases for joint prediction, in particular for infrequent categories and discuss the complementarity of the two approaches.</abstract>
      <url hash="2c230191">2021.spnlp-1.6</url>
      <doi>10.18653/v1/2021.spnlp-1.6</doi>
      <bibkey>dayanik-etal-2021-using</bibkey>
    </paper>
    </volume>
</collection>